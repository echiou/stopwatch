{"version":3,"file":"component---src-pages-index-tsx-c28aa61180b3cf911ac8.js","mappings":"kKAWA,EARiB,SAACA,GAChB,OACE,uBAAKC,UAAU,iCAAiCC,QAASF,EAAMG,IAC5DH,EAAMI,OCAPC,EAAO,CACXC,WAAY,eAGRC,EAAAA,SAAAA,GAGJ,WAAYP,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAaFQ,MAAQ,WACN,EAAKC,UAAS,iBAAO,CACnBC,SAAS,MAEX,EAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAQ,KAlB9B,EAqBnBC,KAAO,WACL,EAAKL,UAAS,iBAAO,CACnBC,SAAS,MAEXK,cAAc,EAAKJ,WAzBF,EAoCnBK,UAAY,WACL,EAAKC,MAAMP,QAGd,EAAKI,OAFL,EAAKN,SAtCU,EA4CnBU,MAAQ,WACN,EAAKJ,OACL,EAAKL,UAAS,iBAAO,CACnBU,GAAI,OA7CN,EAAKF,MAAQ,CACXP,SAAS,EACTS,GAAI,GAJW,GAHfZ,EAAAA,EAAAA,GAAAA,EAAAA,GASH,kBAyEA,OAzEA,EAEDM,KAAA,WACEO,KAAKX,UAAS,SAACQ,GAAD,MAAY,CACxBE,GAAIF,EAAME,GAAK,OAElB,EAgBDE,kBAAA,WACED,KAAKZ,SACN,EAEDc,qBAAA,WACEP,cAAcK,KAAKT,WACpB,EAiBDY,WAAA,SAAWC,GACT,IAAIL,EAAKK,EAAW,IAChBC,EAAUC,KAAKC,MAAMH,EAAW,KAEhCI,EAAIH,EAAU,GAClB,OAFQC,KAAKC,MAAMF,EAAU,IAAM,IAG/BI,WAAWC,SAAS,EAAG,KACzB,IACAF,EAAEC,WAAWC,SAAS,EAAG,KACzB,IACAX,EAAGU,WAAWC,SAAS,EAAG,MAE7B,EAEDC,OAAA,WACE,OACE,uBAAK9B,UAAU,qBACb,uBAAKA,UAAU,UACb,sBAAI+B,MAAO3B,GAAOe,KAAKG,WAAWH,KAAKH,MAAME,MAE/C,uBAAKlB,UAAU,UACb,uBAAKA,UAAU,aACb,gBAAC,EAAD,CAAUG,KAAK,aAAaD,GAAIiB,KAAKJ,YACrC,gBAAC,EAAD,CAAUZ,KAAK,QAAQD,GAAIiB,KAAKF,YAKzC,EAlFGX,CAAc0B,EAAAA,WAmGpB,EAd4B,WAC1B,OACE,4BACE,+BACE,uBAAKhC,UAAU,yBACb,uBAAKA,UAAU,oBACb,gBAACM,EAAD","sources":["webpack://test/./src/components/ecButton.js","webpack://test/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react';\n\n// Defining the <EcButton> component\nconst EcButton = (props) => {\n  return (\n    <div className=\"btn btn-large btn-dark outline\" onClick={props.fn}>\n      {props.text}\n    </div>\n  );\n};\n\nexport default EcButton;\n","import 'cirrus-ui';\nimport * as React from 'react';\nimport '@fontsource/cutive-mono';\n\nimport EcButton from '../components/ecButton';\n\nconst mono = {\n  fontFamily: 'Cutive Mono',\n};\n\nclass Timer extends React.Component<any, any> {\n  interval: NodeJS.Timer;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      running: true,\n      cs: 0,\n    };\n  }\n\n  tick() {\n    this.setState((state) => ({\n      cs: state.cs + 1,\n    }));\n  }\n\n  start = () => {\n    this.setState(() => ({\n      running: true,\n    }));\n    this.interval = setInterval(() => this.tick(), 10);\n  };\n\n  stop = () => {\n    this.setState(() => ({\n      running: false,\n    }));\n    clearInterval(this.interval);\n  };\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  startStop = () => {\n    if (!this.state.running) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  };\n\n  reset = () => {\n    this.stop();\n    this.setState(() => ({\n      cs: 0,\n    }));\n  };\n\n  formatTime(total_cs) {\n    let cs = total_cs % 100;\n    let total_s = Math.floor(total_cs / 100);\n    let m = Math.floor(total_s / 60) % 60;\n    let s = total_s % 60;\n    return (\n      m.toString().padStart(2, '0') +\n      ':' +\n      s.toString().padStart(2, '0') +\n      '.' +\n      cs.toString().padStart(2, '0')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"row u-text-center\">\n        <div className=\"col-12\">\n          <h1 style={mono}>{this.formatTime(this.state.cs)}</h1>\n        </div>\n        <div className=\"col-12\">\n          <div className=\"btn-group\">\n            <EcButton text=\"Start/Stop\" fn={this.startStop} />\n            <EcButton text=\"Reset\" fn={this.reset} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst IndexPage: React.FC = () => {\n  return (\n    <main>\n      <section>\n        <div className=\"hero level fullscreen\">\n          <div className=\"level-item w-100\">\n            <Timer />\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default IndexPage;\n"],"names":["props","className","onClick","fn","text","mono","fontFamily","Timer","start","setState","running","interval","setInterval","tick","stop","clearInterval","startStop","state","reset","cs","this","componentDidMount","componentWillUnmount","formatTime","total_cs","total_s","Math","floor","s","toString","padStart","render","style","React"],"sourceRoot":""}